// Generated by CoffeeScript 1.12.7

/**
 * Logger object providing several logging methods which differ by used severity
 */

(function() {
  var Logger,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Logger = (function() {
    Logger.DEBUG = 1;

    Logger.INFO = 2;

    Logger.WARNING = 3;

    Logger.ERROR = 4;


    /**
     * @param {int} verbosityLevel One of defined constants.
     */

    function Logger(verbosityLevel) {
      this._setVerbosity(verbosityLevel);
    }

    Logger.prototype.debug = function(msg) {
      return this._log(msg, Logger.DEBUG);
    };

    Logger.prototype.info = function(msg) {
      return this._log(msg, Logger.INFO);
    };

    Logger.prototype.warning = function(msg) {
      return this._log(msg, Logger.WARNING);
    };

    Logger.prototype.error = function(msg) {
      return this._log(msg, Logger.ERROR);
    };

    Logger.prototype._setVerbosity = function(verbosityLevel) {
      var allowedVerbosityLevels;
      allowedVerbosityLevels = [Logger.DEBUG, Logger.INFO, Logger.WARNING, Logger.ERROR];
      if (indexOf.call(allowedVerbosityLevels, verbosityLevel) < 0) {
        throw new Error("Invalid verbosity level given '" + verbosityLevel + "'.");
      }
      return this._verbosityLevel = verbosityLevel;
    };

    Logger.prototype._log = function(msg, severity) {
      if (severity >= this._verbosityLevel) {
        return console.log(msg);
      }
    };

    return Logger;

  })();

  module.exports = Logger;

}).call(this);
